<script>
(function () {
    // Função para obter o valor de um parâmetro da URL
    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    // Função para definir um cookie com domínio
    function setCookie(cookieName, cookieValue, expirationTime) {
        var cookiePath = "/";
        expirationTime = expirationTime * 1000; // Converter tempo de expiração para milissegundos
        var date = new Date();
        var dateTimeNow = date.getTime();
        date.setTime(dateTimeNow + expirationTime);
        var expirationDate = date.toUTCString();
        var domain = ".mentoriaoretorno.com.br"; // Variável do GTM para o domínio, com ponto antes
        document.cookie = cookieName + "=" + cookieValue + "; expires=" + expirationDate + "; path=" + cookiePath + "; domain=" + domain;
    }

    // Função para obter o valor de um cookie pelo nome
    function getCookieValue(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i=0;i < ca.length;i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c=c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
    }

    // Definir o nome do cookie e eventId
    var cookieName = "index";
    var sck = getCookieValue(cookieName);

    // Se não estiver no cookie, tentar obter do localStorage
    if (!sck) {
        sck = localStorage.getItem(cookieName);
    }

    // Se ainda não estiver disponível, usar valor padrão (modificado para só usar o cookie)
    if (!sck || sck === '') {
        sck = "{{event_id}}"; // Variável GTM substituída
    }

    // Armazenar o sck no cookie, localStorage e sessionStorage
    var expirationTime = 34560000; // Um ano em segundos
    setCookie(cookieName, sck, expirationTime);
    localStorage.setItem(cookieName, sck);
    sessionStorage.setItem(cookieName, sck);

    // **Início do código adicionado para salvar a data de entrada**

    // Definir o nome do cookie e data de entrada
    var dateCookieName = "entry_date";
    var entryDate = getCookieValue(dateCookieName);

    // Se não estiver no cookie, tentar obter do localStorage
    if (!entryDate) {
        entryDate = localStorage.getItem(dateCookieName);
    }

    // Se ainda não estiver disponível, usar o timestamp atual
    if (!entryDate || entryDate === '') {
        entryDate = new Date().getTime().toString(); // timestamp em milissegundos

        // Armazenar entryDate no cookie, localStorage e sessionStorage
        var dateExpirationTime = 34560000; // Um ano em segundos
        setCookie(dateCookieName, entryDate, dateExpirationTime);
        localStorage.setItem(dateCookieName, entryDate);
        sessionStorage.setItem(dateCookieName, entryDate);
    }

    // **Fim do código adicionado**

    // Vetor de parâmetros que indicam origem de anúncios
    var adParams = ['fbclid', 'gclid'];

    // Verificar se algum dos parâmetros de anúncio está presente na URL
    var isAdClick = false;
    for (var i = 0; i < adParams.length; i++) {
        var param = adParams[i];
        if (getParameterByName(param)) {
            isAdClick = true;
            break;
        }
    }

    // Capturar utms da URL ou do referrer
    var utmSource = getParameterByName('utm_source');
    var utmMedium = getParameterByName('utm_medium');
    var utmCampaign = getParameterByName('utm_campaign');
    var utmContent = getParameterByName('utm_content');
    var utmTerm = getParameterByName('utm_term');

    // Condição para não salvar UTMs quando o utm_source for 'organico'
    if (utmSource && utmSource.toLowerCase() !== 'organico') {
        if (isAdClick || utmSource) {
            if (utmSource) setCookie('cookieUtmSource', utmSource, 63072000); // 2 anos em segundos
            if (utmMedium) setCookie('cookieUtmMedium', utmMedium, 63072000);
            if (utmCampaign) setCookie('cookieUtmCampaign', utmCampaign, 63072000);
            if (utmContent) setCookie('cookieUtmContent', utmContent, 63072000);
            if (utmTerm) setCookie('cookieUtmTerm', utmTerm, 63072000);
        }
    }

    // Parâmetros UTM
    var parametros = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"];

    // Capturar parâmetros da URL atual e do referrer
    var utms = {};

    // Obter valores dos cookies UTM, se existirem
    var cookieUtmSource = getCookieValue('cookieUtmSource');
    var cookieUtmMedium = getCookieValue('cookieUtmMedium');
    var cookieUtmCampaign = getCookieValue('cookieUtmCampaign');
    var cookieUtmContent = getCookieValue('cookieUtmContent');
    var cookieUtmTerm = getCookieValue('cookieUtmTerm');

    // Obter parâmetros da URL atual
    for (var i = 0; i < parametros.length; i++) {
        var el = parametros[i];
        if (el === "utm_source") {
            utms[el] = getParameterByName(el) || (document.referrer ? (getParameterByName(el, document.referrer) || getReferrerHost()) : "direto");
        } else {
            utms[el] = getParameterByName(el) || getParameterByName(el, document.referrer) || "";
        }
    }

    function getReferrerHost() {
        var a = document.createElement('a');
        a.href = document.referrer;
        return a.hostname;
    }

    // Construir scks e srcValues
    var scks = [sck];  // Agora o sck é apenas o valor do cookie index

    var srcValues = [];
    if (cookieUtmSource) srcValues.push(cookieUtmSource);
    if (cookieUtmMedium) srcValues.push(cookieUtmMedium);
    if (cookieUtmCampaign) srcValues.push(cookieUtmCampaign);
    if (cookieUtmContent) srcValues.push(cookieUtmContent);
    if (cookieUtmTerm) srcValues.push(cookieUtmTerm);

    // Modificar a URL atual
    var currentUrlParams = window.location.search ? window.location.search.substring(1) : '';
    var currentParams = {};
    if (currentUrlParams.length > 0) {
        var pairs = currentUrlParams.split('&');
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i].split('=');
            if (pair.length === 2) {
                currentParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
            }
        }
    }

    var modified = false;

    for (var key in utms) {
        if (utms.hasOwnProperty(key) && !currentParams.hasOwnProperty(key) && utms[key] !== "") {
            currentParams[key] = utms[key];
            modified = true;
        }
    }

    if (!currentParams.hasOwnProperty('src') && srcValues.length > 0) {
        currentParams['src'] = srcValues.join('|');
        modified = true;
    }

    if (!currentParams.hasOwnProperty('sck') && scks.length > 0) {
        currentParams['sck'] = scks.join('|');
        modified = true;
    }

    if (modified) {
        var newSearch = '?';
        var first = true;
        for (var key in currentParams) {
            if (currentParams.hasOwnProperty(key)) {
                if (!first) {
                    newSearch += '&';
                }
                newSearch += encodeURIComponent(key) + '=' + encodeURIComponent(currentParams[key]);
                first = false;
            }
        }
        var newURL = window.location.protocol + '//' + window.location.host + window.location.pathname + newSearch + window.location.hash;
        window.history.replaceState(null, null, newURL);
    }

    function updateElementHref(el, href) {
        try {
            var elURL = document.createElement('a');
            elURL.href = href;
            var elSearch = elURL.search ? elURL.search.substring(1) : '';
            var elParams = {};
            if (elSearch.length > 0) {
                var pairs = elSearch.split('&');
                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    if (pair.length === 2) {
                        elParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
                    }
                }
            }
            var modified = false;

            // Preservar todos os parâmetros existentes da URL atual
            for (var key in currentParams) {
                if (currentParams.hasOwnProperty(key) && !elParams.hasOwnProperty(key)) {
                    elParams[key] = currentParams[key];
                    modified = true;
                }
            }

            // Adicionar valores dos cookies UTM na URL como 'src'
            if (!elParams.hasOwnProperty('src') && srcValues.length > 0) {
                elParams['src'] = srcValues.join('|');
                modified = true;
            }

            // Adicionar o parâmetro sck
            if (!elParams.hasOwnProperty('sck') && scks.length > 0) {
                elParams['sck'] = scks.join('|');
                modified = true;
            }

            if (modified) {
                // Reconstruir a URL
                var newSearch = '?';
                var first = true;
                for (var key in elParams) {
                    if (elParams.hasOwnProperty(key)) {
                        if (!first) {
                            newSearch += '&';
                        }
                        newSearch += encodeURIComponent(key) + '=' + encodeURIComponent(elParams[key]);
                        first = false;
                    }
                }
                var newHref = elURL.protocol + '//' + elURL.host + elURL.pathname + newSearch + elURL.hash;
                return newHref;
            } else {
                return href;
            }
        } catch (e) {
            console.warn('Erro ao processar URL:', href);
            return href;
        }
    }

    // Atualizar os links
    var links = document.getElementsByTagName('a');
    for (var i = 0; i < links.length; i++) {
        var el = links[i];
        if (el.href) {
            el.href = updateElementHref(el, el.href);
        }
    }

    // Atualizar iframes
    var iframes = document.getElementsByTagName('iframe');
    for (var i = 0; i < iframes.length; i++) {
        var iframe = iframes[i];
        var actualSrc = iframe.getAttribute('data-src') || iframe.src;
        if (actualSrc) {
            var newSrc = updateElementHref(iframe, actualSrc);
            if (iframe.hasAttribute('data-src')) {
                iframe.setAttribute('data-src', newSrc);
            } else {
                iframe.src = newSrc;
            }
        }
    }

})();
</script>
