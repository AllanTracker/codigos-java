<script>
(function () {
    var isProcessing = false;
    var lastProcessedURL = '';

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    function getCookie(name) {
        var value = "; " + document.cookie;
        var parts = value.split("; " + name + "=");
        if (parts.length === 2) return parts.pop().split(";").shift();
        return null;
    }

    function deleteCookie(name, domain) {
        document.cookie = name + "=; SameSite=None; Secure; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=" + domain;
    }

    function getRootDomain(hostname) {
        var parts = hostname.split('.');
        if (parts.length >= 3) {
            var tld = parts.slice(-2).join('.');
            var compoundTLDs = ['com.br', 'org.br', 'net.br', 'gov.br', 'co.uk', 'com.au'];
            if (compoundTLDs.includes(tld)) {
                return parts.slice(-3).join('.');
            }
        }
        return parts.slice(-2).join('.');
    }

    function setCookie(cookieName, cookieValue, expirationTime) {
        var r = window.location;
        var domain = getRootDomain(r.hostname);
        var cookieDomain = "." + domain;
        var expires = new Date(new Date().getTime() + expirationTime * 1000).toUTCString();
        
        document.cookie = cookieName + "=" + cookieValue +
                          "; SameSite=None; Secure" +
                          "; expires=" + expires +
                          "; path=/; domain=" + cookieDomain;
    }

    function syncValues(cookieName) {
        var r = window.location;
        var domain = getRootDomain(r.hostname);
        var cookieDomain = "." + domain;
        var expires = new Date(new Date().getTime() + 365 * 24 * 60 * 60 * 1000).toUTCString();
        
        var c = getCookie(cookieName);
        var s = sessionStorage.getItem(cookieName);
        var l = localStorage.getItem(cookieName);
        var v = c || s || l;
        if (v && v !== "undefined") {
            if (!c) {
                document.cookie = cookieName + "=" + v +
                                  "; SameSite=None; Secure" +
                                  "; expires=" + expires +
                                  "; path=/; domain=" + cookieDomain;
            }
            if (!s) sessionStorage.setItem(cookieName, v);
            if (!l) localStorage.setItem(cookieName, v);
        }
        
        if (c === "undefined") deleteCookie(cookieName, cookieDomain);
        if (s === "undefined") sessionStorage.removeItem(cookieName);
        if (l === "undefined") localStorage.removeItem(cookieName);
    }

    function getCookieValue(name) {
        return getCookie(name);
    }

    function setStorageValue(key, value) {
        try {
            localStorage.setItem(key, value);
        } catch (e) {}
        try {
            sessionStorage.setItem(key, value);
        } catch (e) {}
    }

    function getStorageValue(key) {
        try {
            return localStorage.getItem(key) || sessionStorage.getItem(key);
        } catch (e) {
            return null;
        }
    }

    function getReferrerHost() {
        try {
            var a = document.createElement('a');
            a.href = document.referrer;
            return a.hostname;
        } catch (e) {
            return "direto";
        }
    }

    function processAndUpdateURL() {
        if (isProcessing) return null;
        isProcessing = true;

        try {
            var currentURL = window.location.href;
            if (currentURL === lastProcessedURL) {
                isProcessing = false;
                return null;
            }

            var cookieName = "index";
            var sck = getCookieValue(cookieName);

            if (!sck) {
                sck = getStorageValue(cookieName);
            }

            if (!sck || sck === '') {
                var now = new Date().getTime();
                var microseconds = now * 1000 + Math.floor(Math.random() * 1000);
                sck = microseconds.toString();
            }

            var r = window.location;
            var domain = getRootDomain(r.hostname);
            var cookieDomain = "." + domain;
            var existingCookie = getCookie(cookieName);
            var existingSession = sessionStorage.getItem(cookieName);
            var existingLocal = localStorage.getItem(cookieName);
            
            if (existingCookie === "undefined") {
                deleteCookie(cookieName, cookieDomain);
            }
            if (existingSession === "undefined") {
                sessionStorage.removeItem(cookieName);
            }
            if (existingLocal === "undefined") {
                localStorage.removeItem(cookieName);
            }

            var expirationTime = 34560000;
            var expires = new Date(new Date().getTime() + expirationTime * 1000).toUTCString();
            document.cookie = cookieName + "=" + sck +
                              "; SameSite=None; Secure" +
                              "; expires=" + expires +
                              "; path=/; domain=" + cookieDomain;
            
            try {
                sessionStorage.setItem(cookieName, sck);
                localStorage.setItem(cookieName, sck);
            } catch (e) {}
            
            setInterval(function() {
                syncValues(cookieName);
            }, 500);

            var dateCookieName = "entry_date";
            var entryDate = getCookieValue(dateCookieName);

            if (!entryDate) {
                entryDate = getStorageValue(dateCookieName);
            }

            if (!entryDate || entryDate === '') {
                entryDate = new Date().getTime().toString();
                var dateExpirationTime = 34560000;
                setCookie(dateCookieName, entryDate, dateExpirationTime);
                setStorageValue(dateCookieName, entryDate);
            }

            var adParams = ['fbclid', 'gclid'];

            var isAdClick = false;
            for (var i = 0; i < adParams.length; i++) {
                var param = adParams[i];
                if (getParameterByName(param)) {
                    isAdClick = true;
                    break;
                }
            }

            var utmSource = getParameterByName('utm_source');
            var utmMedium = getParameterByName('utm_medium');
            var utmCampaign = getParameterByName('utm_campaign');
            var utmContent = getParameterByName('utm_content');
            var utmTerm = getParameterByName('utm_term');

            if (utmSource && utmSource.toLowerCase() !== 'organico') {
                if (isAdClick || utmSource) {
                    if (utmSource) setCookie('cookieUtmSource', utmSource, 63072000);
                    if (utmMedium) setCookie('cookieUtmMedium', utmMedium, 63072000);
                    if (utmCampaign) setCookie('cookieUtmCampaign', utmCampaign, 63072000);
                    if (utmContent) setCookie('cookieUtmContent', utmContent, 63072000);
                    if (utmTerm) setCookie('cookieUtmTerm', utmTerm, 63072000);
                }
            }

            var parametros = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"];

            var utms = {};

            var cookieUtmSource = getCookieValue('cookieUtmSource');
            var cookieUtmMedium = getCookieValue('cookieUtmMedium');
            var cookieUtmCampaign = getCookieValue('cookieUtmCampaign');
            var cookieUtmContent = getCookieValue('cookieUtmContent');
            var cookieUtmTerm = getCookieValue('cookieUtmTerm');

            for (var i = 0; i < parametros.length; i++) {
                var el = parametros[i];
                if (el === "utm_source") {
                    utms[el] = getParameterByName(el) || (document.referrer ? (getParameterByName(el, document.referrer) || getReferrerHost()) : "direto");
                } else {
                    utms[el] = getParameterByName(el) || getParameterByName(el, document.referrer) || "";
                }
            }

            var scks = [sck];

            var srcValues = [];
            if (cookieUtmSource) srcValues.push(cookieUtmSource);
            if (cookieUtmMedium) srcValues.push(cookieUtmMedium);
            if (cookieUtmCampaign) srcValues.push(cookieUtmCampaign);
            if (cookieUtmContent) srcValues.push(cookieUtmContent);
            if (cookieUtmTerm) srcValues.push(cookieUtmTerm);

            var currentUrlParams = window.location.search ? window.location.search.substring(1) : '';
            var currentParams = {};
            if (currentUrlParams.length > 0) {
                var pairs = currentUrlParams.split('&');
                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    if (pair.length === 2) {
                        currentParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
                    }
                }
            }

            var modified = false;

            if (!currentParams.hasOwnProperty('sck') || currentParams['sck'] !== sck) {
                currentParams['sck'] = sck;
                modified = true;
            }

            for (var key in utms) {
                if (utms.hasOwnProperty(key) && !currentParams.hasOwnProperty(key) && utms[key] !== "") {
                    currentParams[key] = utms[key];
                    modified = true;
                }
            }

            if (!currentParams.hasOwnProperty('src') && srcValues.length > 0) {
                currentParams['src'] = srcValues.join('|');
                modified = true;
            }

            var firstParam = currentUrlParams.split('&')[0];
            if (firstParam && !firstParam.startsWith('sck=') && currentParams.hasOwnProperty('sck')) {
                modified = true;
            }

            if (modified) {
                var newSearch = '?';
                var first = true;
                
                if (currentParams.hasOwnProperty('sck')) {
                    newSearch += 'sck=' + encodeURIComponent(currentParams['sck']);
                    first = false;
                    delete currentParams['sck'];
                }
                
                for (var key in currentParams) {
                    if (currentParams.hasOwnProperty(key)) {
                        if (!first) {
                            newSearch += '&';
                        }
                        newSearch += encodeURIComponent(key) + '=' + encodeURIComponent(currentParams[key]);
                        first = false;
                    }
                }
                var newURL = window.location.protocol + '//' + window.location.host + window.location.pathname + newSearch + window.location.hash;
                
                if (newURL !== window.location.href) {
                    window.history.replaceState(null, null, newURL);
                    lastProcessedURL = newURL;
                }
            } else {
                lastProcessedURL = currentURL;
            }

            var returnData = {
                sck: sck,
                scks: scks,
                srcValues: srcValues,
                currentParams: currentParams,
                cookieUtmSource: cookieUtmSource,
                cookieUtmMedium: cookieUtmMedium,
                cookieUtmCampaign: cookieUtmCampaign,
                cookieUtmContent: cookieUtmContent,
                cookieUtmTerm: cookieUtmTerm
            };

            isProcessing = false;
            return returnData;
            
        } catch (e) {
            isProcessing = false;
            return null;
        }
    }

    function updateElementHref(el, href, data) {
        try {
            if (!data) return href;
            
            var elURL = document.createElement('a');
            elURL.href = href;
            var elSearch = elURL.search ? elURL.search.substring(1) : '';
            var elParams = {};
            if (elSearch.length > 0) {
                var pairs = elSearch.split('&');
                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    if (pair.length === 2) {
                        elParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
                    }
                }
            }
            var modified = false;

            if (!elParams.hasOwnProperty('sck') && data.scks.length > 0) {
                elParams['sck'] = data.scks.join('|');
                modified = true;
            }

            var reconstructedCurrentParams = {};
            if (data.currentParams) {
                for (var key in data.currentParams) {
                    if (data.currentParams.hasOwnProperty(key)) {
                        reconstructedCurrentParams[key] = data.currentParams[key];
                    }
                }
            }
            if (!reconstructedCurrentParams.hasOwnProperty('sck')) {
                reconstructedCurrentParams['sck'] = data.sck;
            }

            for (var key in reconstructedCurrentParams) {
                if (reconstructedCurrentParams.hasOwnProperty(key) && !elParams.hasOwnProperty(key)) {
                    elParams[key] = reconstructedCurrentParams[key];
                    modified = true;
                }
            }

            if (!elParams.hasOwnProperty('src') && data.srcValues.length > 0) {
                elParams['src'] = data.srcValues.join('|');
                modified = true;
            }

            if (modified) {
                var newSearch = '?';
                var first = true;
                
                if (elParams.hasOwnProperty('sck')) {
                    newSearch += 'sck=' + encodeURIComponent(elParams['sck']);
                    first = false;
                    delete elParams['sck'];
                }
                
                for (var key in elParams) {
                    if (elParams.hasOwnProperty(key)) {
                        if (!first) {
                            newSearch += '&';
                        }
                        newSearch += encodeURIComponent(key) + '=' + encodeURIComponent(elParams[key]);
                        first = false;
                    }
                }
                var newHref = elURL.protocol + '//' + elURL.host + elURL.pathname + newSearch + elURL.hash;
                return newHref;
            } else {
                return href;
            }
        } catch (e) {
            return href;
        }
    }

    function updateAllElements() {
        var data = processAndUpdateURL();
        if (!data) return;
        
        var links = document.getElementsByTagName('a');
        for (var i = 0; i < links.length; i++) {
            var el = links[i];
            if (el.href) {
                el.href = updateElementHref(el, el.href, data);
            }
        }

        var iframes = document.getElementsByTagName('iframe');
        for (var i = 0; i < iframes.length; i++) {
            var iframe = iframes[i];
            var actualSrc = iframe.getAttribute('data-src') || iframe.src;
            if (actualSrc) {
                var newSrc = updateElementHref(iframe, actualSrc, data);
                if (iframe.hasAttribute('data-src')) {
                    iframe.setAttribute('data-src', newSrc);
                } else {
                    iframe.src = newSrc;
                }
            }
        }
    }

    updateAllElements();

    setInterval(function() {
        var currentSck = getParameterByName('sck');
        var expectedSck = getCookieValue('index') || getStorageValue('index');
        
        if (!currentSck || (expectedSck && currentSck !== expectedSck)) {
            updateAllElements();
        }
        
        var urlParams = window.location.search;
        if (urlParams && !urlParams.startsWith('?sck=')) {
            var hasSck = urlParams.indexOf('sck=') !== -1;
            if (hasSck) {
                updateAllElements();
            }
        }
    }, 200);

    if (typeof MutationObserver !== 'undefined') {
        var observer = new MutationObserver(function(mutations) {
            var needsUpdate = false;
            
            for (var i = 0; i < mutations.length; i++) {
                var mutation = mutations[i];
                if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                    for (var j = 0; j < mutation.addedNodes.length; j++) {
                        var node = mutation.addedNodes[j];
                        if (node && node.nodeType === 1) {
                            if (node.tagName === 'A' || node.tagName === 'IFRAME' || 
                                (node.getElementsByTagName && 
                                 (node.getElementsByTagName('a').length > 0 || 
                                  node.getElementsByTagName('iframe').length > 0))) {
                                needsUpdate = true;
                                break;
                            }
                        }
                    }
                    if (needsUpdate) break;
                }
            }
            
            if (needsUpdate) {
                updateAllElements();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    var lastURL = window.location.href;
    setInterval(function() {
        var currentURL = window.location.href;
        if (currentURL !== lastURL) {
            lastURL = currentURL;
            updateAllElements();
        }
    }, 50);

    window.addEventListener('popstate', updateAllElements);
    
    var originalPushState = history.pushState;
    var originalReplaceState = history.replaceState;
    
    history.pushState = function() {
        originalPushState.apply(history, arguments);
        setTimeout(updateAllElements, 0);
    };
    
    history.replaceState = function() {
        originalReplaceState.apply(history, arguments);
        setTimeout(updateAllElements, 0);
    };

})();
</script>
